@inject RegisterManager registers
@inject RegisterState RegisterState

<h4>Registers:</h4>

<table class="table feedback">
    <thead>
        <tr>
            <th scope="col">Register</th>
            <th scope="col">Decimal</th>
            <th scope="col">Binary</th>
            <th scope="col">Hex</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var register in registers.RegisterRepo)
        {
            <tr class="@GetRegisterChangeClass(register.Value.JustChanged)">
                <th scope="row">@register.Key</th>
                <td>@register.Value.Value.ToString()</td>
                <td>@Convert.ToString(register.Value.Value, 2)</td>
                <td>@("0x" + register.Value.Value.ToString("X8"))</td>
            </tr>
        }
    </tbody>
</table>

@code {

    public void RefreshMe()
    {
        StateHasChanged();

        if (RegisterState.ResetRegisters)
        {
            registers.ResetRegisterValues();
            RegisterState.ResetRegisters = false;
        }
    }

    public string GetRegisterChangeClass(bool justChanged)
    {
        return (justChanged) ? "just-changed" : "";
    }
}
