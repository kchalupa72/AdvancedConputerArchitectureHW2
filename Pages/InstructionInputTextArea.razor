@inject ExecutionManager ExecutionManager
@inject RegisterState RegisterState
@inject MemoryState MemoryState 

<div class="code-area-container">
    <h4>Instruction Input:</h4>

    <button type="button" class="btn btn-primary" disabled="@(CanEdit)" @onclick="CompileInput">
        <span class="oi oi-book"></span>
        Compile
    </button>
    <button type="button" class="btn btn-warning" disabled="@(!CanEdit)" @onclick="RegisterEdit">
        <span class="oi oi-document"></span>
        Edit
    </button>
    <textarea disabled="@InputDisabled" id="instructionInputTextArea" @bind="InputTextGiven" @bind:event="oninput" placeholder="Enter Instructions Here..."></textarea>
</div>

<div class="code-area-container">
    <h4>Execution Instructions:</h4>
    <button type="button" class="btn btn-success" disabled="@ExecutionManager.EndOfInstructionSet()" @onclick="ExecuteInstruction">
        <span class="oi oi-media-play"></span> Execute
    </button>
    <ul class="list-group executing-instruction-list">
        @if (!ExecutionManager.InstructionManager.Instructions.Any())
        {
            // fill table with empty data
            for (int i = 0; i < 5; i++)
            {
                var placeHolderText = "";
                if (i == 0)
                {
                    placeHolderText = "Compile Instructions to Fill Execution List.";
                }
                <li class="list-group-item">
                    @placeHolderText
                </li>
            }
        }
        else
        {
            var i = 0;
            @foreach (var instruction in ExecutionManager.InstructionManager.Instructions)
            {
                var placeHolderListItemClass = "list-group-item";
                if (ExecutionManager.InstructionManager.InstructionIndex == i)
                {
                    placeHolderListItemClass = placeHolderListItemClass + " next-instruction";
                }
                    <li class="@placeHolderListItemClass">
                        @StringifyInstruction(instruction);
                        &nbsp;&nbsp;&nbsp;&nbsp;
                        @GetCodeRepresentationOfInstruction(instruction);
                        
                    </li>
                    
                i++;
            }
        }
    </ul>
</div>

@code {
    private string InputTextGiven;

    public bool InputDisabled = false;

    public bool CanEdit = false;

    private void CanEditToggle()
    {
        CanEdit = !CanEdit;
    }

    public void CompileInput()
    {
        ExecutionManager.InstructionManager.ProcessInstructions(InputTextGiven);
        InputDisabled = !InputDisabled;
        RegisterState.ResetRegisters = true;
        MemoryState.ResetMemory = true;
        CanEditToggle();
        RegisterState.RegistersStateChanged();
        MemoryState.MemoryStateChanged();
    }

    private void RegisterEdit()
    {
        InputDisabled = !InputDisabled;
        CanEditToggle();
    }

    private string StringifyInstruction(ApprovedInstruction instruction)
    {
        return ExecutionManager.InstructionManager.StringifyInstruction(instruction);
    }

    private string GetCodeRepresentationOfInstruction(ApprovedInstruction instruction) 
    {
        return ExecutionManager.GetBinaryExecutionRepresentation(instruction);
    }

    public void ExecuteInstruction()
    {
        ExecutionManager.ExecuteNextIntsruction();
        RegisterState.RegistersStateChanged();
        MemoryState.MemoryStateChanged();

    }
}
