@inject ProvidedInstructionManager InstructionManager
@inject ExecutionManager ExecutionManager
@inject RegisterState RegisterState

<div class="code-area-container">
    <h4>Instruction Input:</h4>

    <button type="button" class="btn btn-primary" @onclick="CompileInput">
        <span class="oi oi-book"></span>
        Compile
    </button>
    <button type="button" class="btn btn-warning" @onclick="(e => InputDisabled = !InputDisabled)">
        <span class="oi oi-document"></span>
        Edit
    </button>
    <textarea disabled="@InputDisabled" id="instructionInputTextArea" @bind="InputTextGiven" @bind:event="oninput" placeholder="Enter Instructions Here..."></textarea>
</div>

<div class="code-area-container">
    <h4>Execution Instructions:</h4>
    <button type="button" class="btn btn-success" @onclick="ExecuteInstruction">
        <span class="oi oi-media-play"></span> Execute
    </button>
    <ul class="list-group executing-instruction-list">
        @if (!InstructionManager.Instructions.Any())
        {
            // fill table with empty data
            for (int i = 0; i < 5; i++)
            {
                var placeHolderText = "";
                if (i == 0)
                {
                    placeHolderText = "Compile Instructions to Fill Execution List.";
                }
                <li class="list-group-item">
                    @placeHolderText
                </li>
            }
        }
        else
        {
            var i = 0;
            @foreach (var instruction in InstructionManager.Instructions)
            {
                var placeHolderListItemClass = "list-group-item";
                if (InstructionManager.InstructionIndex == i) 
                {
                    placeHolderListItemClass = placeHolderListItemClass + " next-instruction";
                }
                <li class="@placeHolderListItemClass">
                    @StringifyInstruction(instruction);
                </li>

                i++;
            }
        }
    </ul>
</div>



@code {
    private string InputTextGiven;

    //private ProvidedInstructionManager InstructionManager = new ProvidedInstructionManager();


    public bool InputDisabled = false;

    public void CompileInput(MouseEventArgs e)
    {
        InstructionManager.FilterInstructions(SplitInstructions(InputTextGiven));
        InputDisabled = !InputDisabled;
        InvokeAsync(() => StateHasChanged()); ;
    }

    private List<string> SplitInstructions(string instructionsGiven)
    {
        var instructions = InputTextGiven.Split(new Char[] { ';', '\n' }).ToList();
        instructions.RemoveAll(i => string.IsNullOrEmpty(i));
        return instructions;
    }

    private string StringifyInstruction(ApprovedInstruction instruction)
    {
        var stringInstruction = instruction.Operation;
        instruction.Arguements.ForEach(arg => stringInstruction = stringInstruction + " " + arg);
        return stringInstruction;
    }

    public void ExecuteInstruction()
    {
        //TODO Make this an execute next instruction method
        ExecutionManager.ExecuteInstruction(InstructionManager.Instructions.ElementAt(InstructionManager.InstructionIndex));
        InstructionManager.InstructionIndex++;
        RegisterState.RegistersStateChanged();
    }
}
